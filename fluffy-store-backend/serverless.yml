service: fluffy-store-backend

frameworkVersion: "2"

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: us-east-1
  environment:
    PRODUCTS_TABLE_NAME: Products
    USERS_TABLE_NAME: Users
    IMAGES_BUCKET_NAME: fluffy-store
    JWT_KEY: TON_FLUFFY_STORE_TON
    COUNT_API_KEY: count
    COUNT_API_NAMESPACE: fluffy-store
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE_NAME}"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE_NAME}"
    - Effect: Allow
      Action:
        - s3:putObjectAcl
      Resource: "arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET_NAME}/"

functions:
  authorization:
    handler: src/api/auth.authorize

  authentication:
    handler: src/api/auth.authenticate
    events:
      - http:
          method: post
          path: admin/sign_in
          cors: true

  admin-count-accesses:
    handler: src/api/admin/accesses.count
    events:
      - http:
          method: get
          path: admin/accesses
          authorizer: authorization
          cors: true

  admin-create-upload-url:
    handler: src/api/admin/images.upload
    events:
      - http:
          method: post
          path: admin/images/url
          authorizer: authorization
          cors: true

  admin-create-product:
    handler: src/api/admin/products.create
    events:
      - http:
          method: post
          path: admin/products
          authorizer: authorization
          cors: true

  list-products:
    handler: src/api/products.list
    events:
      - http:
          method: get
          path: products

  hit-accesses:
    handler: src/api/accesses.hit
    events:
      - http:
          method: get
          path: accesses/hit

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PRODUCTS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:provider.environment.IMAGES_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
              AllowedOrigins:
                - "*"
